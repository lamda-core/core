Expr =
    | Err
    | Int Int64
    | Var String
    | Ctr String
    | Let (String, Expr) Expr
    | Lam Expr Expr
    | Or Expr Expr
    | App Expr Expr

reduce : Expr -> Expr =
    | (Let (x, a) (Var x')) ? x == x' -> reduce a
    | (Let def (Let (x, a) b)) -> reduce (Let def (reduce (Let def' b)))
    | (Let def (Lam p a)) -> Lam p (Let def a)
    | (Let def (Or a b)) -> Or (Let def a) (Let def b)
    | (Let def (App a b)) -> reduce (App (Let def a) (Let def b))
    | (Let _ a) -> reduce a
    | (Or a b) -> reduce a
        | Err -> reduce b
        | Lam p a -> Or (Lam p a) b
        | a -> a
    | (App a b) -> reduce a
        | Err -> Err
        | (Lam (Var x) a) -> reduce (Let (x, b) a)
        | (Lam (Let def p) a) -> reduce (App (Lam (reduce (Let def p)) a) b)
        -- TODO: Lam Lam
        | (Lam (Or p q) a) -> reduce (Or (App (Lam p a) b) (App (Lam q a) b))
        | (Lam (App p q) a) -> reduce b
            | App b b' -> reduce (App (Lam p (App (Lam q a) b')) b)
            | _ -> Err
        | (Lam p a) -> reduce b
            | b ? p == b -> reduce a
            | _ -> Err
        | (Or a a') -> reduce (Or (App a b) (App a' b))
        | (App op a) -> (op, reduce a, reduce b)
            | (Add, Int a, Int b) -> Int ((+) a b)
            | (Sub, Int a, Int b) -> Int ((-) a b)
            | (Mul, Int a, Int b) -> Int ((*) a b)
            | (_, a, b) -> App (App op a) b
        | (Call f xs) -> Call f [..xs, x]
        | a -> App a b
    | a -> a
